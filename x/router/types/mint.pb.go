// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: router/mint.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// mints are stored so incoming IBC forward messages can check if a mint has been processed
// @param attestation // TODO
// @param amount
// @param destinationDomain
// @param mintRecipient
type Mint struct {
	SourceDomainSender string      `protobuf:"bytes,1,opt,name=source_domain_sender,json=sourceDomainSender,proto3" json:"source_domain_sender,omitempty"`
	Nonce              uint64      `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Attestation        string      `protobuf:"bytes,3,opt,name=attestation,proto3" json:"attestation,omitempty"`
	Amount             *types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	DestinationDomain  string      `protobuf:"bytes,5,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	MintRecipient      string      `protobuf:"bytes,6,opt,name=mint_recipient,json=mintRecipient,proto3" json:"mint_recipient,omitempty"`
}

func (m *Mint) Reset()         { *m = Mint{} }
func (m *Mint) String() string { return proto.CompactTextString(m) }
func (*Mint) ProtoMessage()    {}
func (*Mint) Descriptor() ([]byte, []int) {
	return fileDescriptor_650d9754adf300ce, []int{0}
}
func (m *Mint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mint.Merge(m, src)
}
func (m *Mint) XXX_Size() int {
	return m.Size()
}
func (m *Mint) XXX_DiscardUnknown() {
	xxx_messageInfo_Mint.DiscardUnknown(m)
}

var xxx_messageInfo_Mint proto.InternalMessageInfo

func (m *Mint) GetSourceDomainSender() string {
	if m != nil {
		return m.SourceDomainSender
	}
	return ""
}

func (m *Mint) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Mint) GetAttestation() string {
	if m != nil {
		return m.Attestation
	}
	return ""
}

func (m *Mint) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Mint) GetDestinationDomain() string {
	if m != nil {
		return m.DestinationDomain
	}
	return ""
}

func (m *Mint) GetMintRecipient() string {
	if m != nil {
		return m.MintRecipient
	}
	return ""
}

func init() {
	proto.RegisterType((*Mint)(nil), "noble.router.Mint")
}

func init() { proto.RegisterFile("router/mint.proto", fileDescriptor_650d9754adf300ce) }

var fileDescriptor_650d9754adf300ce = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x41, 0x4b, 0xeb, 0x40,
	0x14, 0x85, 0x3b, 0xef, 0xb5, 0x85, 0x37, 0x7d, 0x0a, 0x1d, 0xba, 0x88, 0x5d, 0x84, 0x20, 0x08,
	0xdd, 0x34, 0x63, 0x75, 0xe9, 0x4e, 0xdd, 0xba, 0x89, 0xb8, 0x71, 0x53, 0x92, 0xf4, 0x12, 0x07,
	0x9a, 0x7b, 0xcb, 0xcc, 0x4d, 0xd1, 0x7f, 0xe1, 0xcf, 0x72, 0xd9, 0xa5, 0x4b, 0x69, 0x7f, 0x85,
	0x3b, 0xc9, 0x4c, 0x84, 0xee, 0x4e, 0xce, 0x39, 0xb9, 0x7c, 0x9c, 0x91, 0x63, 0x4b, 0x0d, 0x83,
	0xd5, 0xb5, 0x41, 0x4e, 0x37, 0x96, 0x98, 0xd4, 0x7f, 0xa4, 0x62, 0x0d, 0x69, 0x08, 0xa6, 0x71,
	0x49, 0xae, 0x26, 0xa7, 0x8b, 0xdc, 0x81, 0xde, 0x2e, 0x0a, 0xe0, 0x7c, 0xa1, 0x4b, 0x32, 0x18,
	0xda, 0xd3, 0x49, 0x45, 0x15, 0x79, 0xa9, 0x5b, 0x15, 0xdc, 0xf3, 0x6f, 0x21, 0xfb, 0x0f, 0x06,
	0x59, 0x5d, 0xca, 0x89, 0xa3, 0xc6, 0x96, 0xb0, 0x5c, 0x51, 0x9d, 0x1b, 0x5c, 0x3a, 0xc0, 0x15,
	0xd8, 0x48, 0x24, 0x62, 0xf6, 0x2f, 0x53, 0x21, 0xbb, 0xf7, 0xd1, 0xa3, 0x4f, 0xd4, 0x44, 0x0e,
	0x90, 0xb0, 0x84, 0xe8, 0x4f, 0x22, 0x66, 0xfd, 0x2c, 0x7c, 0xa8, 0x44, 0x8e, 0x72, 0x66, 0x70,
	0x9c, 0xb3, 0x21, 0x8c, 0xfe, 0xfa, 0xdf, 0x8f, 0x2d, 0xb5, 0x90, 0xc3, 0xbc, 0xa6, 0x06, 0x39,
	0xea, 0x27, 0x62, 0x36, 0xba, 0x3a, 0x4b, 0x03, 0x79, 0xda, 0x92, 0xa7, 0x1d, 0x79, 0x7a, 0x47,
	0x06, 0xb3, 0xae, 0xa8, 0xe6, 0x52, 0xad, 0xc0, 0xb1, 0x41, 0x7f, 0xa1, 0x23, 0x8c, 0x06, 0xfe,
	0xf6, 0xf8, 0x28, 0x09, 0x7c, 0xea, 0x42, 0x9e, 0xb6, 0x33, 0x2d, 0x2d, 0x94, 0x66, 0x63, 0x00,
	0x39, 0x1a, 0xfa, 0xea, 0x49, 0xeb, 0x66, 0xbf, 0xe6, 0xed, 0xd3, 0xc7, 0x3e, 0x16, 0xbb, 0x7d,
	0x2c, 0xbe, 0xf6, 0xb1, 0x78, 0x3f, 0xc4, 0xbd, 0xdd, 0x21, 0xee, 0x7d, 0x1e, 0xe2, 0xde, 0xf3,
	0x4d, 0x65, 0xf8, 0xa5, 0x29, 0xd2, 0x92, 0x6a, 0xed, 0xd8, 0xe6, 0x58, 0xc1, 0x9a, 0xb6, 0x30,
	0xdf, 0x02, 0x72, 0x63, 0xc1, 0x69, 0xbf, 0xfc, 0xbc, 0x7b, 0x92, 0x57, 0xdd, 0x09, 0x7e, 0xdb,
	0x80, 0x2b, 0x86, 0x7e, 0xd9, 0xeb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x3f, 0x8d, 0x77,
	0xb2, 0x01, 0x00, 0x00,
}

func (m *Mint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintMint(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DestinationDomain) > 0 {
		i -= len(m.DestinationDomain)
		copy(dAtA[i:], m.DestinationDomain)
		i = encodeVarintMint(dAtA, i, uint64(len(m.DestinationDomain)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Attestation) > 0 {
		i -= len(m.Attestation)
		copy(dAtA[i:], m.Attestation)
		i = encodeVarintMint(dAtA, i, uint64(len(m.Attestation)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceDomainSender) > 0 {
		i -= len(m.SourceDomainSender)
		copy(dAtA[i:], m.SourceDomainSender)
		i = encodeVarintMint(dAtA, i, uint64(len(m.SourceDomainSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMint(dAtA []byte, offset int, v uint64) int {
	offset -= sovMint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Mint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceDomainSender)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovMint(uint64(m.Nonce))
	}
	l = len(m.Attestation)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovMint(uint64(l))
	}
	l = len(m.DestinationDomain)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovMint(uint64(l))
	}
	return n
}

func sovMint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMint(x uint64) (n int) {
	return sovMint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDomainSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceDomainSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMint = fmt.Errorf("proto: unexpected end of group")
)
