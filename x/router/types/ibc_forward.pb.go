// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: router/ibc_forward.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IBCForwards are stored so incoming mints can check for a forward message
// @param source_domain_sender
// @param port
// @param channel
// @param data
type IBCForward struct {
	SourceDomainSender string `protobuf:"bytes,1,opt,name=source_domain_sender,json=sourceDomainSender,proto3" json:"source_domain_sender,omitempty"`
	Nonce              uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Port               string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Channel            string `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	Data               string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *IBCForward) Reset()         { *m = IBCForward{} }
func (m *IBCForward) String() string { return proto.CompactTextString(m) }
func (*IBCForward) ProtoMessage()    {}
func (*IBCForward) Descriptor() ([]byte, []int) {
	return fileDescriptor_0095e6ef1013a4e9, []int{0}
}
func (m *IBCForward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCForward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCForward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCForward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCForward.Merge(m, src)
}
func (m *IBCForward) XXX_Size() int {
	return m.Size()
}
func (m *IBCForward) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCForward.DiscardUnknown(m)
}

var xxx_messageInfo_IBCForward proto.InternalMessageInfo

func (m *IBCForward) GetSourceDomainSender() string {
	if m != nil {
		return m.SourceDomainSender
	}
	return ""
}

func (m *IBCForward) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *IBCForward) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *IBCForward) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *IBCForward) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*IBCForward)(nil), "noble.router.IBCForward")
}

func init() { proto.RegisterFile("router/ibc_forward.proto", fileDescriptor_0095e6ef1013a4e9) }

var fileDescriptor_0095e6ef1013a4e9 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x6b, 0x68, 0x41, 0x58, 0x4c, 0x56, 0x07, 0xab, 0x83, 0x55, 0x31, 0x75, 0x69, 0x4d,
	0xc5, 0xc8, 0x56, 0x10, 0x12, 0x6b, 0x11, 0x0b, 0x4b, 0x65, 0x3b, 0x47, 0x1a, 0x29, 0xf1, 0x45,
	0xb6, 0x13, 0xe0, 0x2d, 0x98, 0x78, 0x26, 0xc6, 0x8e, 0x8c, 0x28, 0x79, 0x11, 0x14, 0xbb, 0x6c,
	0xdf, 0xdd, 0xf7, 0xdb, 0xd2, 0xfd, 0x94, 0x3b, 0x6c, 0x02, 0x38, 0x59, 0x68, 0xb3, 0x7b, 0x45,
	0xf7, 0xa6, 0x5c, 0xb6, 0xaa, 0x1d, 0x06, 0x64, 0x97, 0x16, 0x75, 0x09, 0xab, 0xe4, 0x67, 0xc2,
	0xa0, 0xaf, 0xd0, 0x4b, 0xad, 0x3c, 0xc8, 0x76, 0xad, 0x21, 0xa8, 0xb5, 0x34, 0x58, 0xd8, 0x94,
	0x9e, 0x4d, 0x73, 0xcc, 0x31, 0xa2, 0x1c, 0x28, 0x6d, 0xaf, 0xbe, 0x08, 0xa5, 0x8f, 0x9b, 0xbb,
	0x87, 0xf4, 0x31, 0xbb, 0xa6, 0x53, 0x8f, 0x8d, 0x33, 0xb0, 0xcb, 0xb0, 0x52, 0x85, 0xdd, 0x79,
	0xb0, 0x19, 0x38, 0x4e, 0xe6, 0x64, 0x71, 0xb1, 0x65, 0xc9, 0xdd, 0x47, 0xf5, 0x14, 0x0d, 0x9b,
	0xd2, 0x89, 0x45, 0x6b, 0x80, 0x9f, 0xcc, 0xc9, 0x62, 0xbc, 0x4d, 0x03, 0x63, 0x74, 0x5c, 0xa3,
	0x0b, 0xfc, 0x34, 0xbe, 0x8b, 0xcc, 0x38, 0x3d, 0x37, 0x7b, 0x65, 0x2d, 0x94, 0x7c, 0x1c, 0xd7,
	0xff, 0xe3, 0x90, 0xce, 0x54, 0x50, 0x7c, 0x92, 0xd2, 0x03, 0x6f, 0x9e, 0xbf, 0x3b, 0x41, 0x0e,
	0x9d, 0x20, 0xbf, 0x9d, 0x20, 0x9f, 0xbd, 0x18, 0x1d, 0x7a, 0x31, 0xfa, 0xe9, 0xc5, 0xe8, 0xe5,
	0x36, 0x2f, 0xc2, 0xbe, 0xd1, 0x2b, 0x83, 0x95, 0xf4, 0xc1, 0x29, 0x9b, 0x43, 0x89, 0x2d, 0x2c,
	0x5b, 0xb0, 0xa1, 0x71, 0xe0, 0x65, 0xac, 0x65, 0x79, 0xac, 0xed, 0x5d, 0x1e, 0x21, 0x7c, 0xd4,
	0xe0, 0xf5, 0x59, 0x3c, 0xfb, 0xe6, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x67, 0xf6, 0xb7, 0x4d, 0x56,
	0x01, 0x00, 0x00,
}

func (m *IBCForward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintIbcForward(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintIbcForward(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintIbcForward(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintIbcForward(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceDomainSender) > 0 {
		i -= len(m.SourceDomainSender)
		copy(dAtA[i:], m.SourceDomainSender)
		i = encodeVarintIbcForward(dAtA, i, uint64(len(m.SourceDomainSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIbcForward(dAtA []byte, offset int, v uint64) int {
	offset -= sovIbcForward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IBCForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceDomainSender)
	if l > 0 {
		n += 1 + l + sovIbcForward(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovIbcForward(uint64(m.Nonce))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovIbcForward(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovIbcForward(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovIbcForward(uint64(l))
	}
	return n
}

func sovIbcForward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIbcForward(x uint64) (n int) {
	return sovIbcForward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IBCForward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcForward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCForward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCForward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDomainSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcForward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcForward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcForward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceDomainSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcForward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcForward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcForward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcForward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcForward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcForward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcForward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcForward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcForward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcForward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIbcForward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcForward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIbcForward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIbcForward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIbcForward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIbcForward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIbcForward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIbcForward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIbcForward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIbcForward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIbcForward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIbcForward = fmt.Errorf("proto: unexpected end of group")
)
