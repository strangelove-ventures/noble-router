// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: router/in_flight_packet.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// InFlightPacket contains information about original packet for
// writing the acknowledgement and refunding if necessary. // TODO fill out params
// @param source_domain_sender
// @param nonce
// @param original_sender_address
// @param refund_channel_id
// @param refund_port_id
// @param packet_src_channel_id
// @param packet_src_port_id
// @param packet_src_channel_id
// @param packet_timeout_timestamp
// @param packet_src_channel_id
// @param packet_timeout_height
// @param packet_data
// @param refund_sequence
// @param retries_remaining
// @param timeout
// @param nonrefundable
type InFlightPacket struct {
	SourceDomainSender     string `protobuf:"bytes,1,opt,name=source_domain_sender,json=sourceDomainSender,proto3" json:"source_domain_sender,omitempty"`
	Nonce                  uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	OriginalSenderAddress  string `protobuf:"bytes,3,opt,name=original_sender_address,json=originalSenderAddress,proto3" json:"original_sender_address,omitempty"`
	RefundChannelId        string `protobuf:"bytes,4,opt,name=refund_channel_id,json=refundChannelId,proto3" json:"refund_channel_id,omitempty"`
	RefundPortId           string `protobuf:"bytes,5,opt,name=refund_port_id,json=refundPortId,proto3" json:"refund_port_id,omitempty"`
	PacketSrcChannelId     string `protobuf:"bytes,6,opt,name=packet_src_channel_id,json=packetSrcChannelId,proto3" json:"packet_src_channel_id,omitempty"`
	PacketSrcPortId        string `protobuf:"bytes,7,opt,name=packet_src_port_id,json=packetSrcPortId,proto3" json:"packet_src_port_id,omitempty"`
	PacketTimeoutTimestamp uint64 `protobuf:"varint,8,opt,name=packet_timeout_timestamp,json=packetTimeoutTimestamp,proto3" json:"packet_timeout_timestamp,omitempty"`
	PacketTimeoutHeight    string `protobuf:"bytes,9,opt,name=packet_timeout_height,json=packetTimeoutHeight,proto3" json:"packet_timeout_height,omitempty"`
	PacketData             []byte `protobuf:"bytes,10,opt,name=packet_data,json=packetData,proto3" json:"packet_data,omitempty"`
	RefundSequence         uint64 `protobuf:"varint,11,opt,name=refund_sequence,json=refundSequence,proto3" json:"refund_sequence,omitempty"`
	RetriesRemaining       int32  `protobuf:"varint,12,opt,name=retries_remaining,json=retriesRemaining,proto3" json:"retries_remaining,omitempty"`
	Timeout                uint64 `protobuf:"varint,13,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Nonrefundable          bool   `protobuf:"varint,14,opt,name=nonrefundable,proto3" json:"nonrefundable,omitempty"`
}

func (m *InFlightPacket) Reset()         { *m = InFlightPacket{} }
func (m *InFlightPacket) String() string { return proto.CompactTextString(m) }
func (*InFlightPacket) ProtoMessage()    {}
func (*InFlightPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_93456951126717f2, []int{0}
}
func (m *InFlightPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InFlightPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InFlightPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InFlightPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InFlightPacket.Merge(m, src)
}
func (m *InFlightPacket) XXX_Size() int {
	return m.Size()
}
func (m *InFlightPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_InFlightPacket.DiscardUnknown(m)
}

var xxx_messageInfo_InFlightPacket proto.InternalMessageInfo

func (m *InFlightPacket) GetSourceDomainSender() string {
	if m != nil {
		return m.SourceDomainSender
	}
	return ""
}

func (m *InFlightPacket) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *InFlightPacket) GetOriginalSenderAddress() string {
	if m != nil {
		return m.OriginalSenderAddress
	}
	return ""
}

func (m *InFlightPacket) GetRefundChannelId() string {
	if m != nil {
		return m.RefundChannelId
	}
	return ""
}

func (m *InFlightPacket) GetRefundPortId() string {
	if m != nil {
		return m.RefundPortId
	}
	return ""
}

func (m *InFlightPacket) GetPacketSrcChannelId() string {
	if m != nil {
		return m.PacketSrcChannelId
	}
	return ""
}

func (m *InFlightPacket) GetPacketSrcPortId() string {
	if m != nil {
		return m.PacketSrcPortId
	}
	return ""
}

func (m *InFlightPacket) GetPacketTimeoutTimestamp() uint64 {
	if m != nil {
		return m.PacketTimeoutTimestamp
	}
	return 0
}

func (m *InFlightPacket) GetPacketTimeoutHeight() string {
	if m != nil {
		return m.PacketTimeoutHeight
	}
	return ""
}

func (m *InFlightPacket) GetPacketData() []byte {
	if m != nil {
		return m.PacketData
	}
	return nil
}

func (m *InFlightPacket) GetRefundSequence() uint64 {
	if m != nil {
		return m.RefundSequence
	}
	return 0
}

func (m *InFlightPacket) GetRetriesRemaining() int32 {
	if m != nil {
		return m.RetriesRemaining
	}
	return 0
}

func (m *InFlightPacket) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *InFlightPacket) GetNonrefundable() bool {
	if m != nil {
		return m.Nonrefundable
	}
	return false
}

func init() {
	proto.RegisterType((*InFlightPacket)(nil), "noble.router.InFlightPacket")
}

func init() { proto.RegisterFile("router/in_flight_packet.proto", fileDescriptor_93456951126717f2) }

var fileDescriptor_93456951126717f2 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x1b, 0x68, 0xf7, 0xc7, 0xeb, 0x0a, 0x98, 0x0e, 0xac, 0x49, 0x84, 0x0a, 0x4d, 0x22,
	0x62, 0x5a, 0x43, 0x41, 0x42, 0x48, 0x9c, 0x80, 0x09, 0xd1, 0xdb, 0x94, 0x8e, 0x0b, 0x17, 0xcb,
	0x49, 0xde, 0xa5, 0x16, 0x89, 0x1d, 0x6c, 0xa7, 0x82, 0x6f, 0xc1, 0xc7, 0xe2, 0xb8, 0x23, 0x47,
	0xd4, 0x1e, 0xf8, 0x1a, 0x28, 0xb6, 0xb3, 0x3f, 0xa7, 0xd8, 0xcf, 0xef, 0x79, 0x9f, 0xbc, 0x79,
	0xed, 0xa0, 0x27, 0x4a, 0x36, 0x06, 0x54, 0xcc, 0x05, 0xbd, 0x28, 0x79, 0xb1, 0x34, 0xb4, 0x66,
	0xd9, 0x37, 0x30, 0xd3, 0x5a, 0x49, 0x23, 0xf1, 0x50, 0xc8, 0xb4, 0x84, 0xa9, 0x33, 0x1d, 0x86,
	0x99, 0xd4, 0x95, 0xd4, 0x71, 0xca, 0x34, 0xc4, 0xab, 0x59, 0x0a, 0x86, 0xcd, 0xe2, 0x4c, 0x72,
	0xe1, 0xdc, 0x87, 0xe3, 0x42, 0x16, 0xd2, 0x2e, 0xe3, 0x76, 0xe5, 0xd4, 0x67, 0xff, 0xfa, 0x68,
	0x34, 0x17, 0x9f, 0x6c, 0xfa, 0x99, 0x0d, 0xc7, 0x2f, 0xd1, 0x58, 0xcb, 0x46, 0x65, 0x40, 0x73,
	0x59, 0x31, 0x2e, 0xa8, 0x06, 0x91, 0x83, 0x22, 0xc1, 0x24, 0x88, 0x76, 0x13, 0xec, 0xd8, 0xa9,
	0x45, 0x0b, 0x4b, 0xf0, 0x18, 0x0d, 0x84, 0x14, 0x19, 0x90, 0x3b, 0x93, 0x20, 0xea, 0x27, 0x6e,
	0x83, 0xdf, 0xa0, 0xc7, 0x52, 0xf1, 0x82, 0x0b, 0x56, 0xfa, 0x08, 0xca, 0xf2, 0x5c, 0x81, 0xd6,
	0xe4, 0xae, 0x8d, 0x3a, 0xe8, 0xb0, 0x8b, 0x79, 0xef, 0x20, 0x7e, 0x81, 0x1e, 0x28, 0xb8, 0x68,
	0x44, 0x4e, 0xb3, 0x25, 0x13, 0x02, 0x4a, 0xca, 0x73, 0xd2, 0xb7, 0x15, 0xf7, 0x1c, 0xf8, 0xe8,
	0xf4, 0x79, 0x8e, 0x8f, 0xd0, 0xc8, 0x7b, 0x6b, 0xa9, 0x4c, 0x6b, 0x1c, 0x58, 0xe3, 0xd0, 0xa9,
	0x67, 0x52, 0x99, 0x79, 0x8e, 0x67, 0xe8, 0xc0, 0x0d, 0x8e, 0x6a, 0x95, 0xdd, 0x4c, 0xdd, 0x72,
	0x9f, 0xe4, 0xe0, 0x42, 0x65, 0xd7, 0xc1, 0xc7, 0x08, 0xdf, 0x28, 0xe9, 0xc2, 0xb7, 0x5d, 0x17,
	0x57, 0x7e, 0x9f, 0xff, 0x16, 0x11, 0x6f, 0x36, 0xbc, 0x02, 0xd9, 0xb8, 0xa7, 0x36, 0xac, 0xaa,
	0xc9, 0x8e, 0x1d, 0xc9, 0x23, 0xc7, 0xcf, 0x1d, 0x3e, 0xef, 0x28, 0x7e, 0x75, 0xd5, 0x59, 0x57,
	0xb9, 0x84, 0xf6, 0x28, 0xc8, 0xae, 0x7d, 0xd3, 0xc3, 0x5b, 0x65, 0x9f, 0x2d, 0xc2, 0x4f, 0xd1,
	0x9e, 0xaf, 0xc9, 0x99, 0x61, 0x04, 0x4d, 0x82, 0x68, 0x98, 0x20, 0x27, 0x9d, 0x32, 0xc3, 0xf0,
	0x73, 0xe4, 0xe7, 0x44, 0x35, 0x7c, 0x6f, 0xa0, 0x3d, 0x98, 0x3d, 0xdb, 0x85, 0x9f, 0xd5, 0xc2,
	0xab, 0xf8, 0xb8, 0x9d, 0xb4, 0x51, 0x1c, 0x34, 0x55, 0xd0, 0x9e, 0x27, 0x17, 0x05, 0x19, 0x4e,
	0x82, 0x68, 0x90, 0xdc, 0xf7, 0x20, 0xe9, 0x74, 0x4c, 0xd0, 0xb6, 0xef, 0x91, 0xec, 0xdb, 0xb4,
	0x6e, 0x8b, 0x8f, 0xd0, 0xbe, 0x90, 0xc2, 0x65, 0xb3, 0xb4, 0x04, 0x32, 0x9a, 0x04, 0xd1, 0x4e,
	0x72, 0x5b, 0xfc, 0xf0, 0xe5, 0xf7, 0x3a, 0x0c, 0x2e, 0xd7, 0x61, 0xf0, 0x77, 0x1d, 0x06, 0xbf,
	0x36, 0x61, 0xef, 0x72, 0x13, 0xf6, 0xfe, 0x6c, 0xc2, 0xde, 0xd7, 0x77, 0x05, 0x37, 0xcb, 0x26,
	0x9d, 0x66, 0xb2, 0x8a, 0xb5, 0x51, 0x4c, 0x14, 0x50, 0xca, 0x15, 0x9c, 0xac, 0x40, 0x98, 0x46,
	0x81, 0x8e, 0xed, 0x3d, 0x3f, 0xf1, 0x3f, 0xc3, 0x8f, 0xd8, 0x2f, 0xcc, 0xcf, 0x1a, 0x74, 0xba,
	0x65, 0xef, 0xf1, 0xeb, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x89, 0x6c, 0x44, 0x2c, 0x03,
	0x00, 0x00,
}

func (m *InFlightPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InFlightPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InFlightPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonrefundable {
		i--
		if m.Nonrefundable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.Timeout != 0 {
		i = encodeVarintInFlightPacket(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x68
	}
	if m.RetriesRemaining != 0 {
		i = encodeVarintInFlightPacket(dAtA, i, uint64(m.RetriesRemaining))
		i--
		dAtA[i] = 0x60
	}
	if m.RefundSequence != 0 {
		i = encodeVarintInFlightPacket(dAtA, i, uint64(m.RefundSequence))
		i--
		dAtA[i] = 0x58
	}
	if len(m.PacketData) > 0 {
		i -= len(m.PacketData)
		copy(dAtA[i:], m.PacketData)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.PacketData)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PacketTimeoutHeight) > 0 {
		i -= len(m.PacketTimeoutHeight)
		copy(dAtA[i:], m.PacketTimeoutHeight)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.PacketTimeoutHeight)))
		i--
		dAtA[i] = 0x4a
	}
	if m.PacketTimeoutTimestamp != 0 {
		i = encodeVarintInFlightPacket(dAtA, i, uint64(m.PacketTimeoutTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PacketSrcPortId) > 0 {
		i -= len(m.PacketSrcPortId)
		copy(dAtA[i:], m.PacketSrcPortId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.PacketSrcPortId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PacketSrcChannelId) > 0 {
		i -= len(m.PacketSrcChannelId)
		copy(dAtA[i:], m.PacketSrcChannelId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.PacketSrcChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RefundPortId) > 0 {
		i -= len(m.RefundPortId)
		copy(dAtA[i:], m.RefundPortId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.RefundPortId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RefundChannelId) > 0 {
		i -= len(m.RefundChannelId)
		copy(dAtA[i:], m.RefundChannelId)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.RefundChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OriginalSenderAddress) > 0 {
		i -= len(m.OriginalSenderAddress)
		copy(dAtA[i:], m.OriginalSenderAddress)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.OriginalSenderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintInFlightPacket(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceDomainSender) > 0 {
		i -= len(m.SourceDomainSender)
		copy(dAtA[i:], m.SourceDomainSender)
		i = encodeVarintInFlightPacket(dAtA, i, uint64(len(m.SourceDomainSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInFlightPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovInFlightPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InFlightPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceDomainSender)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovInFlightPacket(uint64(m.Nonce))
	}
	l = len(m.OriginalSenderAddress)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.RefundChannelId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.RefundPortId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.PacketSrcChannelId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.PacketSrcPortId)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	if m.PacketTimeoutTimestamp != 0 {
		n += 1 + sovInFlightPacket(uint64(m.PacketTimeoutTimestamp))
	}
	l = len(m.PacketTimeoutHeight)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	l = len(m.PacketData)
	if l > 0 {
		n += 1 + l + sovInFlightPacket(uint64(l))
	}
	if m.RefundSequence != 0 {
		n += 1 + sovInFlightPacket(uint64(m.RefundSequence))
	}
	if m.RetriesRemaining != 0 {
		n += 1 + sovInFlightPacket(uint64(m.RetriesRemaining))
	}
	if m.Timeout != 0 {
		n += 1 + sovInFlightPacket(uint64(m.Timeout))
	}
	if m.Nonrefundable {
		n += 2
	}
	return n
}

func sovInFlightPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInFlightPacket(x uint64) (n int) {
	return sovInFlightPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InFlightPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInFlightPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InFlightPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InFlightPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDomainSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceDomainSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalSenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalSenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSrcChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketSrcChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSrcPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketSrcPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketTimeoutTimestamp", wireType)
			}
			m.PacketTimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketTimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketTimeoutHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketTimeoutHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketData = append(m.PacketData[:0], dAtA[iNdEx:postIndex]...)
			if m.PacketData == nil {
				m.PacketData = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundSequence", wireType)
			}
			m.RefundSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefundSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetriesRemaining", wireType)
			}
			m.RetriesRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetriesRemaining |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonrefundable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nonrefundable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInFlightPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInFlightPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInFlightPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInFlightPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInFlightPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInFlightPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInFlightPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInFlightPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInFlightPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInFlightPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInFlightPacket = fmt.Errorf("proto: unexpected end of group")
)
